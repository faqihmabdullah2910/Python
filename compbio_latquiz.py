# -*- coding: utf-8 -*-
"""CompBio_LatQuiz.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LA6P9Ywf9w_VUmXT7k83CeMStW2Gd_zQ
"""

!pip install biopython
import Bio
from Bio.Seq import Seq
from Bio import SeqIO
from Bio.SeqUtils import MeltingTemp as mt
from matplotlib import pyplot as plt
from collections import Counter

"""Read Files"""

#FASTA/GB
# record = SeqIO.parse('nama file', 'tipe file')
# record = SeqIO.parse('dimas.gb','gb')
record = SeqIO.parse('sequence.fasta','fasta')

for record in SeqIO.parse('sequence.fasta','fasta'):
  print(record.id)
  print(record.name)
  print(record.description)
  print(len(record.features))
  print(record.seq)

"""Potongan"""

SeqX = record.seq

seqA = SeqX[2:8]
print(seqA)
seqB = SeqX[round(len(SeqX)/2):round(len(SeqX)/4)*3]
print(seqB)

"""GC/AT Content"""

from Bio.SeqUtils import GC
GCcount = GC(seqB)
ATcount = 100 - GCcount
print(GCcount)
print(ATcount)

"""Melting Temp"""

# Melting temp
mtseqB = mt.Tm_NN(seqB)
print(mtseqB)
mtseqA = mt.Tm_NN(seqA)
print(mtseqA)

"""Mollecular Weight"""

from Bio.SeqUtils import molecular_weight as mw
mwB = mw(seqB)
print(mwB)
mwA = mw(seqA)
print(mwA)

"""Alignment"""

from itertools import pairwise
from Bio import pairwise2
from Bio.pairwise2 import format_alignment

alignmentlocal = pairwise2.align.localxx(seqB,seqA)
for b in alignmentlocal:
  print(format_alignment(*b))

localscore = pairwise2.align.localxx(seqB, seqA,score_only = True)
print(localscore/len(seqB)*100)

DNA = seqB
DNA_Comp = DNA.complement()
# print(DNA_Comp)
# DNA_Reverse_Comp = DNA.reverse_complement
mRNA = DNA_Comp.transcribe()
protein = mRNA.translate()
print(DNA_Comp)
print(mRNA)
print(protein)

#Match: 2 point
#Mismatch: -1 point
#Open Gap: -0.5
#Extend gap; -0.1

#Global alignment with maximum similarity score
seqa = Seq('ACTGACT')
seqb = Seq('TACG')
globalalignment = pairwise2.align.globalms(seqA, seqB, 2, -1, -0.5, -0.1)
for c in globalalignment:
  print(format_alignment(*c))

def check(x,y):
  return 0 if x==y else 1

def create_matrix(seqX, seqY):
  matrix = []
  for x in seqX:
    row =[]
    for y in seqY:
      row.append(check(x,y))
    matrix.append(row)
  return matrix

def display(matrix, seqX, seqY):
  print('  |' + seqY)
  print('='*(len(seqY)+3))
  for label, row in zip(seqX, matrix):
    line = ''.join('X' if s<1 else ' ' for s in row)
    print(label + ' |' + line)


matrix = create_matrix(seqA, seqB)
display(matrix, seqA, seqB)

import matplotlib.pyplot as plt
import numpy as np

plt.imshow(np.array(matrix))
xt = plt.xticks(np.arange(len(list(seqB))), list(seqB))
yt = plt.yticks(np.arange(len(list(seqA))), list(seqA))

!pip install python-Levenshtein